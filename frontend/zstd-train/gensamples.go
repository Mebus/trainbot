/*
Package main (gensamples) generates training samples for generating a zstd dict
to compress URL parameters used in the trainbot frontend.

Usage:

	go run gensamples.go
	zstd --train ./samples/*
*/
package main

import (
	"bufio"
	"bytes"
	"fmt"
	"math/rand"
	"os"
	"path/filepath"
	"strconv"
	"strings"
)

/*
Those are some hardcoded samples, extracted from the authors browser history.

	sqlite3 ~/.mozilla/firefox/places.sql
	.headers on
	.mode csv
	.output filters.csv
	select url from moz_places where url LIKE '%/#/trains/list?%';
*/
const known = `
{"orderBy":"length_px / px_per_m DESC","where":{}}
{"orderBy":"length_px / px_per_m ASC","where":{}}
{"orderBy":"length_px / px_per_m DESC","where":{"start_ts":"DATE(start_ts) = DATE('2023-04-07')"}}
{"orderBy":"ABS(speed_px_s / px_per_m) ASC","where":{}}
{"orderBy":"length_px / px_per_m DESC","where":{"start_ts":"DATE(start_ts) = DATE('2023-04-14')"}}
{"orderBy":"length_px / px_per_m ASC","where":{}}
{"where":{"favs":"id IN (577,2405,2320,2193,1342,1039,343,407,350,307,1724,887,2485,3002,2950,2949,2896,2870,2853,2839,2827,2815,2802,3403,3224,3008,2766,2483,3410,3425,3424,3592,3576,3986,3715,2462,3846,3903,3981,3999,3971,4045,4160,4051,4362,4300,4504,4484,4456,4669,4794,4792,4790,4796,4797,4801,4813,4814,4815,4816,4818,4820,4827,4823,4828,4829,4831,4841,4840,4839,4876,4874,4873,4855,4844,4894,4890,4889,4883,4882,5058,5045,5272,5257,5241,5148,5146)"}}
{}
{"where":{"favs":"id IN (577,2405,2320,2193,1342,1039,343,407,350,307,1724,887,2485,3002,2950,2949,2896,2870,2853,2839,2827,2815,2802,3403,3224,3008,2766,2483,3410,3425,3424,3592,3576,3986,3715,2462,3846,3903,3981,3999,3971,4045,4160,4051,4362,4300,4504,4484,4456,4669,4794,4792,4790,4796,4797,4801,4813,4814,4815,4816,4818,4820,4827,4828,4829,4831,4841,4840,4839,4876,4874,4873,4855,4844,4894,4890,4889,4883,4882,5058,5045,5272,5257,5241,5148,5146,4823,5437,2754,3770,3768,4025,4158,4426,4430,5325,5401)"}}
{"orderBy":"ABS(speed_px_s / px_per_m) DESC","where":{}}
{"where":{"favs":"id IN (577,2405,2320,2193,1342,1039,343,407,350,307,1724,887,2485,3002,2950,2949,2896,2870,2853,2839,2827,2815,2802,3403,3224,3008,2766,2483,3410,3425,3424,3592,3576,3986,3715,2462,3846,3903,3981,3999,3971,4045,4160,4051,4362,4300,4504,4484,4456,4669,4794,4792,4790,4796,4797,4801,4813,4814,4815,4816,4818,4820,4827,4828,4829,4831,4841,4840,4839,4876,4874,4873,4855,4844,4894,4890,4889,4883,4882,5058,5045,5272,5257,5241,5148,5146,4823,5437,2754,3770,3768,4025,4158,4426,4430,5325,5401,6124,6567,6560,6553,6085,5972,5535,5700,6786)"}}
{"where":{"favs":"id IN (577,2405,2320,2193,1342,1039,343,407,350,307,1724,887,2485,3002,2950,2949,2896,2870,2853,2839,2827,2815,2802,3403,3224,3008,2766,2483,3410,3425,3424,3592,3576,3986,3715,2462,3846,3903,3981,3999,3971,4045,4160,4051,4362,4300,4504,4484,4456,4669,4794,4792,4790,4796,4797,4801,4813,4814,4815,4816,4818,4820,4827,4828,4829,4831,4841,4840,4839,4876,4874,4873,4855,4844,4894,4890,4889,4883,4882,5058,5045,5272,5257,5241,5148,5146,4823,5437,2754,3770,3768,4025,4158,4426,4430,5325,5401,6124,6567,6560,6553,6085,5972,5535,5700,6786)"}}
{"where":{"favs":"id IN (577,2405,2320,2193,1342,1039,343,407,350,307,1724,887,2485,3002,2950,2949,2896,2870,2853,2839,2827,2815,2802,3403,3224,3008,2766,2483,3410,3425,3424,3592,3576,3986,3715,2462,3846,3903,3981,3999,3971,4045,4160,4051,4362,4300,4504,4484,4456,4669,4794,4792,4790,4796,4797,4801,4813,4814,4815,4816,4818,4820,4827,4828,4829,4831,4841,4840,4839,4876,4874,4873,4855,4844,4894,4890,4889,4883,4882,5058,5045,5272,5257,5241,5148,5146,4823,5437,2754,3770,3768,4025,4158,4426,4430,5325,5401,6124,6567,6560,6553,6085,5972,5535,5700,6786,7232,8332,8334,8137,7911,8532,8518,8496,8415,7956,7939,7136,6824,7000,7001)"}}
{"where":{"favs":"id IN (577,2405,2320,2193,1342,1039,343,407,350,307,1724,887,2485,3002,2950,2949,2896,2870,2853,2839,2827,2815,2802,3403,3224,3008,2766,2483,3410,3425,3424,3592,3576,3986,3715,2462,3846,3903,3981,3999,3971,4045,4160,4051,4362,4300,4504,4484,4456,4669,4794,4792,4790,4796,4797,4801,4813,4814,4815,4816,4818,4820,4827,4828,4829,4831,4841,4840,4839,4876,4874,4873,4855,4844,4894,4890,4889,4883,4882,5058,5045,5272,5257,5241,5148,5146,4823,5437,2754,3770,3768,4025,4158,4426,4430,5325,5401,6124,6567,6560,6553,6085,5972,5535,5700,6786,7232,8332,8334,8137,7911,8532,8518,8496,8415,7956,7939,7136,6824,7000,7001,9328,9321,9286,9281,9213,9207,9188,9649,9648,9621,9614,9584,9529,9528,9450,9422,9268,9231,9179,9175,8786,8588)"}}
{"where":{"favs":"id IN (3643,13507,13499,13489,13460,13420)"}}
{"orderBy":"length_px / px_per_m DESC","where":{}}
{"where":{"start_ts":"DATE(start_ts) = DATE('2023-08-15')"}}
{"where":{"start_ts":"DATE(start_ts) = DATE('2023-04-28')"}}
{"where":{"start_ts":"DATE(start_ts) = DATE('2023-03-28')"}}
{"where":{"dir":"speed_px_s > 0"}}
{"orderBy":"ABS(speed_px_s / px_per_m) ASC","where":{"start_ts":"DATE(start_ts) = DATE('2023-10-19')"}}
{"orderBy":"ABS(speed_px_s / px_per_m) ASC","where":{"start_ts":"DATE(start_ts) = DATE('2023-10-18')"}}
{"orderBy":"ABS(speed_px_s / px_per_m) ASC","where":{"start_ts":"DATE(start_ts) = DATE('2023-10-18')","dir":"speed_px_s > 0"}}
{"orderBy":"ABS(speed_px_s / px_per_m) ASC","where":{"start_ts":"DATE(start_ts) = DATE('2023-10-18')","dir":"speed_px_s > 0"}}
{"orderBy":"ABS(speed_px_s / px_per_m) ASC","where":{"start_ts":"DATE(start_ts) = DATE('2023-10-18')","dir":"speed_px_s < 0"}}
{"orderBy":"ABS(speed_px_s / px_per_m) DESC","where":{"start_ts":"DATE(start_ts) = DATE('2023-10-18')","dir":"speed_px_s < 0"}}
{"where":{"start_ts":"DATE(start_ts) = DATE('2023-10-18')"}}
{"where":{"start_ts":"DATE(start_ts) = DATE('2023-10-18')"},"orderBy":"length_px / px_per_m ASC"}"
{"where":{"start_ts":"DATE(start_ts) = DATE('2023-10-18')"},"orderBy":"ABS(speed_px_s / px_per_m) DESC"}"
{"where":{"start_ts":"DATE(start_ts) = DATE('2023-10-18')","dir":"speed_px_s > 0"},"orderBy":"ABS(speed_px_s / px_per_m) DESC"}"
{"where":{"favs":"id IN (577,2405,2320,2193,1342,1039,343,407,350,307,1724,887,2485,3002,2950,2949,2896,2870,2853,2839,2827,2815,2802,3403,3224,3008,2766,2483,3410,3425,3424,3592,3576,3986,3715,2462,3846,3903,3981,3999,3971,4045,4160,4051,4362,4300,4504,4484,4456,4669,4794,4792,4790,4796,4797,4801,4813,4814,4815,4816,4818,4820,4827,4829,4831,4841,4840,4839,4876,4874,4873,4855,4844,4894,4890,4889,4883,4882,5058,5045,5272,5257,5241,5148,5146,4823,5437,2754,3770,3768,4025,4158,4426,4430,5325,5401,6124,6567,6560,6553,5972,5535,5700,6786,7232,8332,8334,8137,7911,8532,8518,8496,8415,7956,7939,7136,7000,7001,9328,9321,9286,9281,9213,9207,9188,9649,9648,9621,9614,9584,9529,9528,9450,9422,9268,9231,9179,9175,8786,8588,11529,11420,11406,11224,11292,11223,11199,11101,11094,11027,11014,10773,10626,10349,10333,9846,9866,9814,12424,12345,12324,12216,12219,12221,12226,12235,12556,13024,12607,13267,13989,13988,13979,13914,13909,13896,13886,13728,13513,13507,13461,12410,12331,14193,14184,14213,14252,14336,14362,14373,13420,3643,13489,13460,13499,15347,15276,15263,15201,15068,15033,14985,14809,14821,14702,15443,15435,15414,15374,17103,17089,17088,17087,17084,17063,17058,17054,16954,16952,16896,16895,16890,16878,16876,16864,16856,16838,16690,16644,16388,16386,16296,16283,16282,16269,16255,16239,16152,16127,16113,16100,16086,16072,16053,15923,15885,15879,15877,15874,15783,15691,15673,15615,15577,15564,18079,14479,138,11810,18090,17983,17974,17962,17956,17860,17581,17536,17472,17471,17468,17305,17252,17211,17190,18288,18599,18538,20417,20421,20150,19604,19515,19259,19260,20426,15457,21289,20885,20862,20818,20808,20479,19387,19342,19317,18342,21282,21215,21098,21085,21782,21775,21749,21737,22835,19805,20863,22033,22317,22360,22655,23107,23215,23185,23244,23253,23258,23373,23445,23510,23538,23587,23562,23614,23671,23905,23906,23923,24016,24046,25260,25205,25087,25054,25024,24930,24508,24496,24487,24409,24378,24274,25636,25617,25616,25595,25587,25533,25298,27421,27388,27305,27301,27157,27154,27141,26997,26923,26811,26752,26713,26701,26588,26535,26521,26412,26394,26281,26274,26198,26141,25851,25777,25776,25752,25664,28510,28505,28393,28475,28503,28390,28310,28241,28180,28080,27560,29291,29282,29275,29252,29158,29096,29088,32739,32732,32702,32694,32590,32395,32380)"}}
`
const (
	tmpl   = `{"where":{"favs":"id IN (%s)"}}`
	maxLen = 100
	maxVal = 100000
	dir    = "samples"
)

func genLine() string {
	n := rand.Intn(maxLen) + 1
	s := strings.Builder{}
	for i := 0; i < n; i++ {
		s.WriteString(strconv.FormatInt(int64(rand.Intn(maxVal)), 10))
		s.WriteByte(',')
	}
	str := s.String()
	return fmt.Sprintf(tmpl, str[:len(str)-1])
}

func writeSample(n int, s string) {
	fname := fmt.Sprintf("sample%06d", n)
	err := os.WriteFile(filepath.Join(dir, fname), []byte(s), 0644)
	if err != nil {
		panic(err)
	}
	fmt.Println(fname, s)
}

func main() {
	_ = os.MkdirAll(dir, 0755)

	buf := bytes.NewBufferString(strings.TrimSpace(known))
	scan := bufio.NewScanner(buf)

	n := 0

	for ; n < 10000; n++ {
		writeSample(n, genLine())
	}

	for scan.Scan() {
		line := scan.Text()
		writeSample(n, strings.TrimSpace(line))
		n++
	}
}
